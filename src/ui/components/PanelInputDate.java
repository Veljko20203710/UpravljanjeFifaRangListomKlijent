/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.components;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import ui.validator.Validator;

/**
 *
 * @author student1
 */
public class PanelInputDate extends javax.swing.JPanel implements IValue {

    /**
     * Creates new form PanelInputDate
     */
    private Validator validator;
    private String day;
    private String month;
    private String year;
    private Date date;

    public PanelInputDate() {
        initComponents();
        prepareView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFieldText = new javax.swing.JLabel();
        lblError = new javax.swing.JLabel();
        cbDay = new javax.swing.JComboBox<>();
        cbMonth = new javax.swing.JComboBox<>();
        cbYear = new javax.swing.JComboBox<>();

        lblFieldText.setText("label");

        lblError.setForeground(new java.awt.Color(255, 0, 0));
        lblError.setText("label");

        cbDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbYear, 0, 117, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbDay;
    private javax.swing.JComboBox<String> cbMonth;
    private javax.swing.JComboBox<String> cbYear;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblFieldText;
    // End of variables declaration//GEN-END:variables

    private void prepareView() {
        removeComboBoxesItems();
        fillDays();
        fillMonths();
        fillYears();
    }

    private void removeComboBoxesItems() {
        cbDay.removeAllItems();
        cbMonth.removeAllItems();
        cbYear.removeAllItems();
    }

    private void fillMonths() {
        for (int i = 1; i < 32; i++) {
            cbDay.addItem(i + "");
        }
    }

    private void fillDays() {
        for (int i = 1; i < 13; i++) {
            cbMonth.addItem(i + "");
        }
    }

    private void fillYears() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
        Date yearDate = new Date();
        lblError.setText("");
        int possibleYear = Integer.parseInt(sdf.format(yearDate));
        for (int i = possibleYear; i > possibleYear - 4; i--) {
            cbYear.addItem(i + "");
        }
    }

    @Override
    public Object getValue() throws Exception {
        try {
            lblError.setText("");
            readDate();
            parseDate();
            validateDate();
            return date;
        } catch (Exception e) {
            throw e;
        }
    }

    private void validateDate() throws Exception {
        try {
            validator.validate(date);
        } catch (Exception ex) {
            throw ex;
        }
    }

    private void parseDate() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        date = sdf.parse(day + "." + month + "." + year);
    }

    private void readDate() {
        day = (String) cbDay.getSelectedItem();
        month = (String) cbMonth.getSelectedItem();
        year = (String) cbYear.getSelectedItem();
    }

    public javax.swing.JLabel getLblError() {
        return lblError;
    }

    public javax.swing.JLabel getLblFieldText() {
        return lblFieldText;
    }

    @Override
    public void initialize(Object initValue) {
        cbYear.removeAllItems();
        fillYears();
    }

    @Override
    public void setValue(Object value) {
        date = (Date) value;
        SimpleDateFormat daySDF = new SimpleDateFormat("dd");
        cbDay.setSelectedItem(Integer.parseInt(daySDF.format(date)) + "");
        SimpleDateFormat monthSDF = new SimpleDateFormat("MM");
        cbMonth.setSelectedItem(monthSDF.format(date));
        SimpleDateFormat yearSDF = new SimpleDateFormat("yyyy");
        cbYear.setSelectedItem(yearSDF.format(date));
    }

    public Validator getValidator() {
        return validator;
    }

    public void setValidator(Validator validator) {
        this.validator = validator;
    }
}
