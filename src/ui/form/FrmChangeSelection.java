/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.form;

import controller.Controller;
import domain.Confederation;
import domain.Match;
import domain.MatchType;
import domain.Selection;
import domain.User;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import ui.components.PanelInputComboBoxSmall;
import ui.components.PanelInputTextFieldSmall;
import ui.listeners.ListenerChangeSelection;
import ui.table.ModelTableSelection;
import ui.validator.DateValidator;
import ui.validator.GoalValidator;

/**
 *
 * @author Veljko
 */
public class FrmChangeSelection extends javax.swing.JFrame {

    /**
     * Creates new form FrmChangeSelection
     */
    private static Selection selection;
    private ResourceBundle resourceBundle;
    private final Logger LOGGER = Logger.getLogger(FrmChangeSelection.class);
    private int startPositon = 0;
    private final int tableSize = 5;
    private List<Match> matches;
    private List<Selection> selections;

    public FrmChangeSelection(Selection selection) {
        this.selection = selection;
        setSelections();
        initComponents();
        initializeResourceBundle();
        prepareView();
        setMatches();
        setTable();
        initListeners();
    }

    private void setSelections() {
        try {
            this.selections = Controller.getInstance().getAllSelections();
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(FrmChangeSelection.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnEdit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        panelInputDateMatch = new ui.components.PanelInputDate();
        panelInputTextFieldHostGoals = new ui.components.PanelInputTextFieldSmall();
        panelInputTextFieldAwayGoals = new ui.components.PanelInputTextFieldSmall();
        panelInputHost = new ui.components.PanelInputComboBoxSmall();
        jbtnAddMatch = new javax.swing.JButton();
        panelInputComboBoxMatchType = new ui.components.PanelInputComboBoxSmall();
        panelInputAway = new ui.components.PanelInputComboBoxSmall();
        panelInputName = new ui.components.PanelInputTextFieldSmall();
        panelInputConfederation = new ui.components.PanelInputComboBoxSmall();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMatches = new javax.swing.JTable();
        JLblBackward = new javax.swing.JLabel();
        JLblForward = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        jbtnClose = new javax.swing.JButton();
        jButtonChangeSelection = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jbtnEdit.setText("jButton2");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("New match"));

        jbtnAddMatch.setText("jButton1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelInputTextFieldHostGoals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnAddMatch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(panelInputTextFieldAwayGoals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelInputHost, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelInputDateMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelInputComboBoxMatchType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelInputAway, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(panelInputHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelInputDateMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(panelInputAway, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelInputComboBoxMatchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelInputTextFieldHostGoals, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelInputTextFieldAwayGoals, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnAddMatch, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(32, 32, 32))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Matches"));

        jTableMatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableMatches);

        JLblBackward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Fast-backward-icon.png"))); // NOI18N
        JLblBackward.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JLblBackwardMouseClicked(evt);
            }
        });

        JLblForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Button-Forward-icon.png"))); // NOI18N
        JLblForward.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JLblForwardMouseClicked(evt);
            }
        });

        btnDelete.setText("jButton1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(JLblBackward)
                .addGap(272, 272, 272)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JLblForward))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JLblBackward, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(JLblForward)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnDelete)))
                .addContainerGap())
        );

        jbtnClose.setText("jButton1");

        jButtonChangeSelection.setText("btnChange");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jbtnClose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtnEdit)
                .addGap(38, 38, 38))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(panelInputName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(panelInputConfederation, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(362, 362, 362)
                        .addComponent(jButtonChangeSelection)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(panelInputName, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelInputConfederation, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonChangeSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnEdit)
                    .addComponent(jbtnClose))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JLblBackwardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JLblBackwardMouseClicked
        if (startPositon - tableSize < 0) {
            return;
        }
        startPositon -= tableSize;
        setTable();
    }//GEN-LAST:event_JLblBackwardMouseClicked

    private void setMatches() {
        try {
            matches = Controller.getInstance().getMatchesBySelection(selection);
        } catch (Exception ex) {
            LOGGER.error(ex);
        }
    }

    private void setTable() {
        try {
            ModelTableSelection modelTableSelection = new ModelTableSelection(matches, startPositon, tableSize);
            jTableMatches.setModel(modelTableSelection);
            validate();
        } catch (Exception ex) {
            LOGGER.error(ex);
        }
    }

    private void JLblForwardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JLblForwardMouseClicked
        try {
            if (startPositon + tableSize >= matches.size()) {
                return;
            }
        } catch (Exception ex) {
            LOGGER.error(ex);
        }
        startPositon += tableSize;
        setTable();
    }//GEN-LAST:event_JLblForwardMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmChangeSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmChangeSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmChangeSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmChangeSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmChangeSelection(selection).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLblBackward;
    private javax.swing.JLabel JLblForward;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton jButtonChangeSelection;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMatches;
    private javax.swing.JButton jbtnAddMatch;
    private javax.swing.JButton jbtnClose;
    private javax.swing.JButton jbtnEdit;
    private ui.components.PanelInputComboBoxSmall panelInputAway;
    private ui.components.PanelInputComboBoxSmall panelInputComboBoxMatchType;
    private ui.components.PanelInputComboBoxSmall panelInputConfederation;
    private ui.components.PanelInputDate panelInputDateMatch;
    private ui.components.PanelInputComboBoxSmall panelInputHost;
    private ui.components.PanelInputTextFieldSmall panelInputName;
    private ui.components.PanelInputTextFieldSmall panelInputTextFieldAwayGoals;
    private ui.components.PanelInputTextFieldSmall panelInputTextFieldHostGoals;
    // End of variables declaration//GEN-END:variables

    private void prepareView() {
        setIconImage();
        fillInputs();
        fillComboBoxConderation();
        fillComboBoxMatchType();
        fillButtons();
        setValidators();
        setTableSize();
    }

    private void setTableSize() {
        jTableMatches.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                jTableMatches.getColumnModel().getColumn(1).setMaxWidth(80);
                jTableMatches.getColumnModel().getColumn(4).setMinWidth(150);
            }
        });
    }

    private void setIconImage() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Resources/ball.png")));
    }

    private void fillInputs() {
        setIconImage();
        fillInputName();
        fillInputNewMatch();
    }

    private void fillInputNewMatch() {
        panelInputTextFieldHostGoals.getLblFieldText().setText(resourceBundle.getString("hostGoals"));
        panelInputTextFieldHostGoals.getLblError().setText("");
        panelInputTextFieldAwayGoals.getLblFieldText().setText(resourceBundle.getString("awayGoals"));
        panelInputTextFieldAwayGoals.getLblError().setText("");
        panelInputDateMatch.getLblFieldText().setText(resourceBundle.getString("date"));
        panelInputDateMatch.getLblError().setText("");
        panelInputHost.getLblFieldText().setText(resourceBundle.getString("host"));
        panelInputHost.getLblError().setText("");
        panelInputAway.getLblFieldText().setText(resourceBundle.getString("away"));
        panelInputAway.getLblError().setText("");
        btnDelete.setText(resourceBundle.getString("delete"));
        jbtnAddMatch.setText(resourceBundle.getString("addMatch"));
        panelInputComboBoxMatchType.getLblError().setText("");
        panelInputComboBoxMatchType.getLblFieldText().setText(resourceBundle.getString("matchType"));
        initializeHostComboBox();
        initializeAwayComboBox();
    }

    private void initializeHostComboBox() {
        try {
            panelInputHost.initialize(selections);
        } catch (Exception ex) {
            LOGGER.error(ex);
        }
    }

    private void initializeAwayComboBox() {
        try {
            panelInputAway.initialize(selections);
        } catch (Exception ex) {
            LOGGER.error(ex);
        }
    }

    private void fillInputName() {
        panelInputName.getLblFieldText().setText(resourceBundle.getString("Name"));
        panelInputName.getTxtInputField().setText(selection.getName());
        panelInputName.getLblError().setText("");
    }

    private void fillComboBoxConderation() {
        try {
            List<Confederation> confederations = Controller.getInstance().getAllConfederations();
            panelInputConfederation.initialize(confederations);
            panelInputConfederation.getLblError().setText("");
            panelInputConfederation.getLblFieldText().setText(resourceBundle.getString("Confederation"));
            panelInputConfederation.setValue(selection.getConfederation());
        } catch (Exception ex) {
            LOGGER.error(ex);
        }
    }

    private void initializeResourceBundle() {
        Locale locale = Controller.getLocale();
        resourceBundle = ResourceBundle.getBundle("resourceBundles.ResourceBundle_FrmEditSelection_" + locale);
    }

    private void fillButtons() {
        jbtnEdit.setText(resourceBundle.getString("btnEdit"));
        jbtnClose.setText(resourceBundle.getString("btnCancel"));
        jButtonChangeSelection.setText(resourceBundle.getString("changeName"));
    }

    private void initListeners() {
        initBtnDeleteMatch();
        initBtnCloseListener();
        initBtnEditListener();
        initBtnAddMatch();
        initBtnChangeSelection();
    }

    private void initBtnCloseListener() {
        jbtnClose.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
    }

    public void initBtnEditListener() {
        jbtnEdit.addActionListener(new ListenerChangeSelection(this));
    }

    public PanelInputComboBoxSmall getPanelInputConfederation() {
        return panelInputConfederation;
    }

    public PanelInputTextFieldSmall getPanelInputName() {
        return panelInputName;
    }

    public Selection getSelection() {
        return selection;
    }

    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    private void initBtnDeleteMatch() {
        btnDelete.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jTableMatches.getSelectedRow() == -1) {
                    return;
                }
                matches.remove(jTableMatches.getSelectedRow());
                setTable();
            }
        });
    }

    private boolean isChosenSelection() {
        return ((Selection) panelInputAway.getCbField().getSelectedItem()).getId() == selection.getId()
                || ((Selection) panelInputHost.getCbField().getSelectedItem()).getId() == selection.getId();
    }

    private boolean isSelectionsDifferent() {
        return ((Selection) panelInputAway.getCbField().getSelectedItem()).equals((Selection) panelInputHost.getCbField().getSelectedItem());
    }

    private void initBtnAddMatch() {
        jbtnAddMatch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!isChosenSelection()) {
                    JOptionPane.showMessageDialog(null, resourceBundle.getString("wrongSelection") + selection.getName(), resourceBundle.getString("Title"), 1);
                    return;
                }
                if (isSelectionsDifferent()) {
                    JOptionPane.showMessageDialog(null, resourceBundle.getString("sameSelections"), resourceBundle.getString("Title"), 1);
                    return;
                }
                try {
                    Match match = new Match();
                    match.setHost((Selection) panelInputHost.getCbField().getSelectedItem());
                    match.setAway((Selection) panelInputAway.getCbField().getSelectedItem());
                    
                    boolean hostGoals = readHostGoals(match);
                    boolean awayGoals = readAwayGoals(match);
                    boolean date = readMatchDate(match);

                    if (!hostGoals || !awayGoals || !date) return;
                        match.setUser(new User(Controller.getInstance().readId(), Controller.getInstance().readUsername()));
                        matches.add(match);
                        resetValues();
                        setTable();
                    
                } catch (Exception ex) {
                    LOGGER.info(ex);
                }
            }

            private void resetValues() {
                panelInputTextFieldAwayGoals.getTxtInputField().setText("");
                panelInputTextFieldHostGoals.getTxtInputField().setText("");
            }
        });
    }

    private boolean readHostGoals(Match match) {
        try {
            String inputGoals = (String) panelInputTextFieldHostGoals.getValue();
            int hostGoals = Integer.parseInt(inputGoals);
            match.setHostGoals(hostGoals);
            return true;
        } catch (Exception ex) {
            panelInputTextFieldHostGoals.getLblError().setText(resourceBundle.getString("IllegalGoalsException"));
            return false;
        }
    }

    private boolean readAwayGoals(Match match) {
        try {
            String inputGoals = (String) panelInputTextFieldAwayGoals.getValue();
            int awayGoals = Integer.parseInt(inputGoals);
            match.setAwayGoals(awayGoals);
            return true;
        } catch (Exception ex) {
            panelInputTextFieldAwayGoals.getLblError().setText(resourceBundle.getString("IllegalGoalsException"));
            return false;
        }
    }

    private boolean readMatchDate(Match match) {
        try {
            Date date = (Date) panelInputDateMatch.getValue();
            match.setDate(date);
            match.setMatchType((MatchType) panelInputComboBoxMatchType.getValue());
            return true;
        } catch (Exception e) {
            panelInputDateMatch.getLblError().setText(resourceBundle.getString("IllegalDateException"));
            return false;
        }
    }

    private void setValidators() {
        GoalValidator goalValidator = new GoalValidator();
        panelInputTextFieldHostGoals.setValidator(goalValidator);
        panelInputTextFieldAwayGoals.setValidator(goalValidator);

        DateValidator dateValidator = new DateValidator();
        panelInputDateMatch.setValidator(dateValidator);
    }

    public List<Match> getMatches() {
        return matches;
    }

    private void fillComboBoxMatchType() {
        try {
            List<MatchType> matchTypes = Controller.getInstance().getAllMatchTypes();
            panelInputComboBoxMatchType.initialize(matchTypes);
        } catch (Exception ex) {
            LOGGER.error(ex);
        }
    }

    private void initBtnChangeSelection() {
        jButtonChangeSelection.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Object inputa = panelInputName.getValue();
                    String name = inputa.toString();
                    for (Match match : matches) {
                        if (match.getHost().getId() == (selection.getId())) {
                            match.getHost().setName(name);
                        } else if (match.getAway().getId() == selection.getId()) {
                            match.getAway().setName(name);
                        }
                        selections.remove(selection);
                        selection.setName(name);
                        selections.add(selection);
                        selections = selections.stream().sorted((o1, o2) -> o1.getName().
                                compareTo(o2.getName())).
                                collect(Collectors.toList());
                        panelInputHost.initialize(selections);
                        panelInputAway.initialize(selections);
                        setTable();
                        validate();
                    }
                } catch (Exception ex) {
                    LOGGER.error(ex);
                }
            }
        });
    }

}
